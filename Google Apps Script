function onOpen() {
  const ui = SpreadsheetApp.getUi();
  const menu = ui.createMenu('AutoFill Docs');
  menu.addItem('Create New Docs', 'createNewGoogleDocs');
  menu.addToUi();
}

function createNewGoogleDocs() {
  const googleDocTemplate = DriveApp.getFileById('enter_doc_id');
  const destinationFolder = DriveApp.getFolderById('enter_folder_id');
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('enter_tab_name');
  const rows = sheet.getDataRange().getValues();

  const currencyFormatter = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });

  const dateFormatter = new Intl.DateTimeFormat('en-US');

 // Helper function to format dates safely
  function formatDate(dateValue) {
    if (dateValue && !isNaN(new Date(dateValue))) {
      return dateFormatter.format(new Date(dateValue));
    } else {
      return '';
    }
  }

  rows.forEach(function(row, index) {
    if (index === 0) return; // Skip header row

    const contractLink = row[0]; // Column A
    const status = row[29]; // Column AD (30th column, zero-based index)

    // Only generate if status is "Needed" and contract link is empty
    if (status !== "Needed" || contractLink) return;

    const contractorName = row[23]; // Column X
    if (!contractorName || contractorName === "Name of Contractor") return; // Skip if name is missing or is the header

    const copy = googleDocTemplate.makeCopy(`${contractorName} - NN24 IC Contract`, destinationFolder);
    const doc = DocumentApp.openById(copy.getId());
    const body = doc.getBody();


    // Format and replace placeholders
    const formattedContractDate = formatDate(row[4]); // Column E
    const formattedStartDate = formatDate(row[7]); // Column H
    const formattedEndDate = formatDate(row[8]); // Column I
    const formattedFirstPaymentDueDate = formatDate(row[11]); // Column L
    const formattedFinalPaymentDueDate = formatDate(row[13]); // Column N
    const formattedArrivalDate = formatDate(row[26]); // Column AA
    const formattedDepartureDate = formatDate(row[27]); // Column AB
    const formattedFirstPaymentAmount = currencyFormatter.format(row[12]); // Column M
    const formattedFinalPaymentAmount = currencyFormatter.format(row[14]); // Column O
    const formattedTotalContractAmount = currencyFormatter.format(row[15]); // Column P

    body.replaceText('{{Date}}', formattedContractDate);
    body.replaceText('{{Name}}', contractorName); // Column X
    body.replaceText('{{Address Field 1}}', row[2]); // Column C
    body.replaceText('{{Address Field 2}}', row[3]); // Column D
    body.replaceText('{{Title}}', row[10]); // Column K
    body.replaceText('{{Reports To}}', row[9]); // Column J
    body.replaceText('{{Dept}}', row[18]); // Column S
    body.replaceText('{{Group}}', row[19]); // Column T
    body.replaceText('{{Area}}', row[20]); // Column U
    body.replaceText('{{Start Date}}', formattedStartDate); // Column H
    body.replaceText('{{End Date}}', formattedEndDate); // Column I
    body.replaceText('{{First Payment Due Date}}', formattedFirstPaymentDueDate); // Column L
    body.replaceText('{{First Payment Amount}}', formattedFirstPaymentAmount); // Column M
    body.replaceText('{{Final Payment Due Date}}', formattedFinalPaymentDueDate); // Column N
    body.replaceText('{{Final Payment Amount}}', formattedFinalPaymentAmount); // Column O
    body.replaceText('{{Total Contract Amount}}', formattedTotalContractAmount); // Column P
    body.replaceText('{{Job Overview}}', row[24]); // Column Y
    body.replaceText('{{Responsibilities and Duties}}', row[25]); // Column Z
    body.replaceText('{{Arrival Date}}', formattedArrivalDate); // Column AA
    body.replaceText('{{Departure Date}}', formattedDepartureDate); // Column AB
    body.replaceText('{{Notes}}', row[28]); // Column AC

    doc.saveAndClose();
    const url = doc.getUrl();

    // Set the URL in the 'Contract Link' column only if it is blank
    if (sheet.getRange(index + 1, 1).isBlank()) { // Column A is the 1st column
      sheet.getRange(index + 1, 1).setValue(url);
    }
  });
}
